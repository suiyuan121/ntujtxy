package cn.edu.ntu.jtxy.web.controller.wx;

import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import cn.edu.ntu.jtxy.biz.service.client.WxClient;
import cn.edu.ntu.jtxy.core.model.BaseResult;
import cn.edu.ntu.jtxy.core.model.wx.StudentInfoDo;
import cn.edu.ntu.jtxy.core.model.wx.StudentInfoDo.GradeTypeEnum;
import cn.edu.ntu.jtxy.core.model.wx.UserInfoDo;
import cn.edu.ntu.jtxy.core.model.wx.WeiXinUserDo;
import cn.edu.ntu.jtxy.core.model.wx.WeiXinUserDo.GroupIdEnum;
import cn.edu.ntu.jtxy.core.repository.UserInfoConvertor;
import cn.edu.ntu.jtxy.core.repository.wx.StudentInfoRepository;
import cn.edu.ntu.jtxy.core.repository.wx.UserInfoRepository;
import cn.edu.ntu.jtxy.core.repository.wx.WeiXinUserRepository;
import cn.edu.ntu.jtxy.core.repository.wx.cond.UserInfoCond;
import cn.edu.ntu.jtxy.core.repository.wx.model.UserInfo;
import cn.edu.ntu.jtxy.util.PwdUtils;
import cn.edu.ntu.jtxy.util.SessionUtil;
import cn.edu.ntu.jtxy.web.SystemConstants;
import cn.edu.ntu.jtxy.web.controller.wx.form.UserBindForm;
import cn.edu.ntu.jtxy.web.filter.OperationContex;

/**
 * 绑定用户
 * @author {jin.zhang@witontek.com}
 * @version $Id: BindController.java, v 0.1 2016年3月30日 下午3:27:55 {jin.zhang@witontek.com} Exp $
 */
@Controller
@RequestMapping(value = "bind.htm")
public class BindController implements SystemConstants {
    /**  */
    private static final Logger   logger    = LoggerFactory.getLogger(BindController.class);

    private static final String   page_bind = "bind";

    @Autowired
    private WeiXinUserRepository  weiXinUserRepository;

    /**  */
    @Autowired
    private StudentInfoRepository studentInfoRepository;

    @Autowired
    private WxClient              wxClient;

    @Autowired
    private UserInfoRepository    userInfoRepository;

    @RequestMapping(method = RequestMethod.GET)
    public String doGet(ModelMap map, String openId) {
        logger.info("绑定用户 doGet   openId={},nickName={}", openId);
        UserInfo userInfo = OperationContex.getCurrentuserinfo();
        if (userInfo != null) {
            map.addAttribute("errMsg", "此账户已经绑定，无须再绑定");
        } else {
            map.addAttribute("errMsg", "请填入正确的学号进行绑定!");
        }
        map.addAttribute("openId", openId);
        return page_bind;
    }

    @RequestMapping(method = RequestMethod.POST)
    public String doPost(UserBindForm bindForm, HttpServletRequest req, ModelMap map) {
        logger.info("绑定用户 doGet   bindForm={}", bindForm);
        String openId = bindForm.getOpenId();
        String stuNo = bindForm.getStuNo();
        String pageBefore = (String) SessionUtil.get(req, PAGE_SESSION);

        WeiXinUserDo weiXinUserDo = weiXinUserRepository.getByOpenId(openId);
        StudentInfoDo studentInfoDo = studentInfoRepository.getByStuNo(stuNo);

        if (weiXinUserDo == null) {
            logger.info("绑定用户 失败   weiXinUserDo={}", weiXinUserDo);
            return ERROR_PAGE;
        }
        if (studentInfoDo == null) {
            logger.info("绑定用户 失败   weiXinUserDo={},studentInfoDo={}", weiXinUserDo, studentInfoDo);
            map.addAttribute("errMsg", "学号不存在");
            map.addAttribute("openId", openId);
            return page_bind;
        }

        //是否已经绑定过，不能重复绑定
        UserInfoCond userInfoCond = new UserInfoCond();
        userInfoCond.setStuNo(stuNo);
        userInfoCond.setOpenId(openId);
        List<UserInfoDo> userList = userInfoRepository.getByCond(userInfoCond);
        if (!CollectionUtils.isEmpty(userList)) {
            logger.error("此学号，微信账号，已经绑定   stuNo={}", stuNo);
            map.addAttribute("openId", openId);
            map.addAttribute("errMsg", "此学号已经绑定");
            return page_bind;
        }

        //根据年级，对微信进行分组
        GradeTypeEnum grade = StudentInfoDo.GradeTypeEnum.getByCode(studentInfoDo.getGrade());
        boolean moveResult = wxClient.moveGroup(openId, getGroupId(grade));
        if (!moveResult) {
            logger.warn("用户移动分组失败   bindForm={}", bindForm);
            return ERROR_PAGE;
        }

        //判断是否是解绑过的用户，解绑过的用户不需要新建
        UserInfoDo userInfoDo = new UserInfoDo();
        userInfoCond.setOpenId(null);
        List<UserInfoDo> userList2 = userInfoRepository.getByCond(userInfoCond);
        boolean retBind = false;
        if (!CollectionUtils.isEmpty(userList2)) {
            logger.info("此学号用户已经存在   userList2={}", userList2);
            userInfoDo = userList2.get(0);
            userInfoDo.setOpenId(openId);
            retBind = userInfoRepository.updateOpenId(userInfoDo);
        } else {
            userInfoDo.setIdNo(studentInfoDo.getIdNo());
            userInfoDo.setLoc(studentInfoDo.getAddress());
            userInfoDo.setMemo("add");
            userInfoDo.setNickName(weiXinUserDo.getNickName());
            userInfoDo.setOpenId(openId);
            userInfoDo.setPhone(studentInfoDo.getPhone());
            userInfoDo.setPwdSalt(UUID.randomUUID().toString());
            userInfoDo.setPwdHash(PwdUtils.hashPassword(studentInfoDo.getStuNo(),
                userInfoDo.getPwdSalt()));
            userInfoDo.setRealName(studentInfoDo.getRealName());
            userInfoDo.setSex(studentInfoDo.getSex());
            userInfoDo.setStatus(UserInfoDo.StatusEnum.ENABLE.getCode());
            userInfoDo.setStuNo(stuNo);
            userInfoDo.setUserType(UserInfoDo.UserTypeEnum.USER.getCode());
            BaseResult addRet = userInfoRepository.add(userInfoDo);
            retBind = addRet.isSuccess();
        }
        if (!retBind) {
            logger.warn("绑定增加用户失败 userInfoDo={}", userInfoDo);
            return ERROR_PAGE;
        }
        //绑定成功
        SessionUtil.setUserInfo(req, UserInfoConvertor.getUserInfo(userInfoDo));
        return "redirect:" + pageBefore;
    }

    private String getGroupId(GradeTypeEnum grade) {
        if (grade == null) {
            return null;
        }
        switch (grade) {
            case YEAR_1:
                return GroupIdEnum.YEAR_1.getCode();
            case YEAR_2:
                return GroupIdEnum.YEAR_2.getCode();
            case YEAR_3:
                return GroupIdEnum.YEAR_3.getCode();
            case YEAR_4:
                return GroupIdEnum.YEAR_4.getCode();
            case GRAGUATION:
                return GroupIdEnum.GRAGUATION.getCode();
            default:
                return null;
        }
    }
}
